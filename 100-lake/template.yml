AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31

Description: >-
  S3 buckets & CloudTrail trail to event off S3 events, and lambda
  to clean and partition lake data.

Parameters:

  EnableDataPlatformEncryption:
    Description: >-
      Create and use a KMS Key to encrypt all log, S3 and at-rest SQS data
      throughout the data platform. Not free-tier compliant: Key creation cost
      $1/month with further usage cost. Leave empty if you don't know what
      you're doing.
    AllowedValues:
      - "True"
      - "False"
    Default: "False"
    Type: String

Conditions:

  ShouldUseDataPlatformKmsKey:
    Fn::Equals:
      - "True"
      - !Ref EnableDataPlatformEncryption

Outputs:

  IngressBucketArn:
    Description: >-
      Bucket ARN. A bucket in which any data type is to be expected.
    Value:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - !Ref IngressBucket
    Export:
      Name: IngressBucketArn

  IngressBucketName:
    Description: >-
      Bucket name. A bucket in which any data type is to be expected.
    Value: !Ref IngressBucket
    Export:
      Name: IngressBucketName

  DataframeBucketArn:
    Description: >-
      Bucket ARN.
    Value:
      Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - !Ref DataframeBucket
    Export:
      Name: DataframeBucketArn

  DataframeBucketName:
    Description: >-
      Bucket name.
    Value: !Ref DataframeBucket
    Export:
      Name: DataframeBucketName

Resources:

###############################################################################
# \/                        S3 buckets configuration                       \/ #
###############################################################################

  # A bucket in which any data type is to be expected. All files and data
  # will go through cleaning & validation, before being copied to the JSON
  # bucket.
  IngressBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - - !Ref AWS::AccountId
            - "lake-ingress"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - Fn::If:
              - ShouldUseDataPlatformKmsKey
              - BucketKeyEnabled: True
                ServerSideEncryptionByDefault:
                  KMSMasterKeyID:
                    Fn::ImportValue: DataPlatformKeyId
                  SSEAlgorithm: aws:kms
              - BucketKeyEnabled: False

  # All valid JSON data from IngressBucket will be here partitionned by table
  # name and date processed based on the Object's metdata.
  # TODO: Invalid JSON data to be tagged and indexed in DynamoDB.
  JsonBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - - !Ref AWS::AccountId
            - "lake-json"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - Fn::If:
              - ShouldUseDataPlatformKmsKey
              - BucketKeyEnabled: True
                ServerSideEncryptionByDefault:
                  KMSMasterKeyID:
                    Fn::ImportValue: DataPlatformKeyId
                  SSEAlgorithm: aws:kms
              - BucketKeyEnabled: False

  # All valid data fron JsonBucket (potentially, other data types) will be
  # transformed to a flat json structure (simillar to a dataframe).
  DataframeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - - !Ref AWS::AccountId
            - "lake-dataframe"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - Fn::If:
              - ShouldUseDataPlatformKmsKey
              - BucketKeyEnabled: True
                ServerSideEncryptionByDefault:
                  KMSMasterKeyID:
                    Fn::ImportValue: DataPlatformKeyId
                  SSEAlgorithm: aws:kms
              - BucketKeyEnabled: False

###############################################################################
# \/                       EventTrail configuration                        \/ #
###############################################################################

  # A trail that specifies the settings for delivery of log data of lake
  # buckets to the LogsBucket bucket.
  LakeEventsTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn:
      - LogsBucketPolicy
    Properties:
      TrailName: lake-events-trail
      S3BucketName: !Ref LogsBucket
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        - IncludeManagementEvents: false
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref IngressBucket
                      - "/"
                - Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref JsonBucket
                      - "/"
                - Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref DataframeBucket
                      - "/"
      IncludeGlobalServiceEvents: false

  # This is the bucket to which CloudTrail will log all S3 lake activity.
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - - !Ref AWS::AccountId
            - "lake-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - Fn::If:
              - ShouldUseDataPlatformKmsKey
              - BucketKeyEnabled: True
                ServerSideEncryptionByDefault:
                  KMSMasterKeyID:
                    Fn::ImportValue: DataPlatformKeyId
                  SSEAlgorithm: aws:kms
              - BucketKeyEnabled: False

  # This grants permissions for CloudTrail to write files to the
  # LogsBucket bucket.
  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AWSCloudTrailS3AclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref LogsBucket
          - Sid: AWSCloudTrailS3Write
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - !Ref LogsBucket
                    - "/AWSLogs/"
                    - !Ref AWS::AccountId
                    - "/*"
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

###############################################################################
# \/                   IngestObject lambda configuration                   \/ #
###############################################################################
# Forward S3 PutObject events from the IngressBucket via CloudTrail to an SQS
# queue. Invokes a lambda which copies data to a properly partitionned S3
# bucket given the file-type.
# Failed SQS messages are put to a DLQ queue.

  #
  IngestObjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lake-ingest_object
      Description: >-
        TODO
      Role:
        Fn::GetAtt:
          - IngestObjectFunctionRole
          - Arn
      CodeUri: ./ingest_object/
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Layers:
        - Fn::ImportValue: SqsPythonUtilsLayerVersionArn
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
          JSON_BUCKET_NAME: !Ref JsonBucket

  #
  IngestObjectFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${IngestObjectFunction}"
      RetentionInDays: 30
      KmsKeyId:
        Fn::If:
          - ShouldUseDataPlatformKmsKey
          - Fn::ImportValue: DataPlatformKeyId
          - !Ref AWS::NoValue

  # Allow the IngestObjectFunction lambda function to write to Cloudwatch,
  # read/write to S3, receive and write messages to SQS.
  IngestObjectFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IngestObjectFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        # Create and put logs to Cloudwatch log groups.
        - PolicyName: IngestObjectFunctionLogsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":logs:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":*"
        - PolicyName: IngestObjectFunctionQueueReadWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueue*
                Resource:
                  - !GetAtt IngestObjectQueue.Arn
        - PolicyName: IngestObjectFunctionS3List
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref IngressBucket
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref JsonBucket
        # Get objects from the IngressBucket S3 bucket.
        - PolicyName: IngestObjectFunctionS3Read
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref IngressBucket
                        - "/*"
        # Put objects to the lake JsonBucket S3 bucket.
        - PolicyName: IngestObjectFunctionS3Write
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref JsonBucket
                        - "/*"

  #
  IngestObjectFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt IngestObjectQueue.Arn
      FunctionName: !GetAtt IngestObjectFunction.Arn

  #
  IngestObjectQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: lake-ingest_object
      VisibilityTimeout: 1800
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt IngestObjectDlqQueue.Arn
        maxReceiveCount: 1
      KmsMasterKeyId:
        Fn::If:
          - ShouldUseDataPlatformKmsKey
          - Fn::ImportValue: DataPlatformKeyId
          - !Ref AWS::NoValue
  #
  IngestObjectQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref IngestObjectQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: IngestObjectQueuePolicy
        Statement:
          - Sid: IngestObjectQueueEventRule
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt IngestObjectQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt IngestObjectQueueEventRule.Arn

  #
  IngestObjectQueueEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        Forward all S3 PutObject events from the IngressBucket to the
        IngestObjectQueue SQS queue.
      EventPattern:
        # Get S3 events via CloudTrail
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          # ... of type PutObject
          eventName:
            - PutObject
          # ... from the bucket IngressBucket
          requestParameters:
            bucketName:
              - !Ref IngressBucket
          # ... Object prefix/key must unique and properly named.
            key:
              - prefix: "id="
      State: ENABLED
      Targets:
        # Forward to IngestObjectFunction lambda function.
        - Arn: !GetAtt IngestObjectQueue.Arn
          Id: IngestObjectQueueRule
        # Strip event from all useless parameters and craft a new event.
          InputTransformer:
            InputPathsMap:
              bucketName: $.detail.requestParameters.bucketName
              key: $.detail.requestParameters.key
            InputTemplate:
              '
              {
                "bucketName": <bucketName>,
                "key": <key>
              }
              '

  #
  IngestObjectDlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: lake-ingest_object-dlq
      VisibilityTimeout: 900
      KmsMasterKeyId:
        Fn::If:
          - ShouldUseDataPlatformKmsKey
          - Fn::ImportValue: DataPlatformKeyId
          - !Ref AWS::NoValue
  #
  IngestObjectDlqQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: IngestObjectDlqQueueThreshold
      AlarmDescription:
        Fn::Sub: ${IngestObjectDlqQueue.QueueName} contains messages.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt IngestObjectDlqQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 0
      TreatMissingData: notBreaching

###############################################################################
# \/                   FlattenJson lambda configuration                    \/ #
###############################################################################

  FlattenJsonFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lake-flatten_json
      Description: >-
        TODO
      Role:
        Fn::GetAtt:
          - FlattenJsonFunctionRole
          - Arn
      CodeUri: ./flatten_json/
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Layers:
        - Fn::ImportValue: SqsPythonUtilsLayerVersionArn
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: DEBUG

  #
  FlattenJsonFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${FlattenJsonFunction}"
      RetentionInDays: 30
      KmsKeyId:
        Fn::If:
          - ShouldUseDataPlatformKmsKey
          - Fn::ImportValue: DataPlatformKeyId
          - !Ref AWS::NoValue

  # Allow the FlattenJsonFunction lambda function to write to Cloudwatch,
  # read/write to S3.
  FlattenJsonFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FlattenJsonFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        # Create and put logs to Cloudwatch log groups.
        - PolicyName: FlattenJsonFunctionLogsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":logs:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":*"
        # Invoked by / read, write, delete from SQS Queue.
        - PolicyName: FlattenJsonFunctionQueueReadWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueue*
                Resource:
                  - !GetAtt FlattenJsonQueue.Arn
        - PolicyName: FlattenJsonFunctionS3List
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref JsonBucket
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref DataframeBucket
        # Get objects from the lake JsonBucket.
        - PolicyName: FlattenJsonFunctionS3Read
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref JsonBucket
                        - "/*"
        # Put objects to the lake DataframeBucket.
        - PolicyName: FlattenJsonFunctionS3Write
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - !Ref DataframeBucket
                        - "/*"

  #
  FlattenJsonFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt FlattenJsonQueue.Arn
      FunctionName: !GetAtt FlattenJsonFunction.Arn

  #
  FlattenJsonQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: lake-flatten_json
      VisibilityTimeout: 1800
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt FlattenJsonDlqQueue.Arn
        maxReceiveCount: 1
      KmsMasterKeyId:
        Fn::If:
          - ShouldUseDataPlatformKmsKey
          - Fn::ImportValue: DataPlatformKeyId
          - !Ref AWS::NoValue
  #
  FlattenJsonQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref FlattenJsonQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: FlattenJsonQueuePolicy
        Statement:
          - Sid: FlattenJsonQueueEventRule
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt FlattenJsonQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt FlattenJsonQueueEventRule.Arn

  #
  FlattenJsonQueueEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: >-
        Forward all S3 PutObject events from the JsonBucket to the
        FlattenJsonQueue SQS queue.
      EventPattern:
        # Get S3 events via CloudTrail
        source:
          - aws.s3
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          # ... of type PutObject
          eventName:
            - PutObject
          # ... from the bucket IngressBucket
          requestParameters:
            bucketName:
              - !Ref JsonBucket
          # ... Object prefix/key must unique and properly partitionned.
            key:
              - prefix: "table="
      State: ENABLED
      Targets:
        # Forward to FlattenJsonQueue SQS queue.
        - Arn: !GetAtt FlattenJsonQueue.Arn
          Id: FlattenJsonQueue
        # Strip event from all useless parameters and craft a new event.
          InputTransformer:
            InputPathsMap:
              bucketName: $.detail.requestParameters.bucketName
              key: $.detail.requestParameters.key
            InputTemplate:
              Fn::Sub:
                '
                {
                  "targetBucket": "${DataframeBucket}",
                  "bucketName": <bucketName>,
                  "key": <key>
                }
                '

  #
  FlattenJsonDlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: lake-flatten_json-dlq
      VisibilityTimeout: 900
      KmsMasterKeyId:
        Fn::If:
          - ShouldUseDataPlatformKmsKey
          - Fn::ImportValue: DataPlatformKeyId
          - !Ref AWS::NoValue
  #
  FlattenJsonDlqQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: FlattenJsonDlqQueueThreshold
      AlarmDescription:
        Fn::Sub: ${FlattenJsonDlqQueue.QueueName} contains messages.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt FlattenJsonDlqQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 0
      TreatMissingData: notBreaching
