AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31

Description: >-
  Deploy an Athena WorkGroup and Lambda functions that will keep your
  Athena tables, and data catalog up-to-date.

Parameters:

  KmsKeyArn:
    Description: >-
      The ARN of the KMS key that will be used to encrypt data services, such
      as CloudWatch LogGroups, S3 Buckets, SQS Queues...
      Setting this parameter to "NONE" will disable encryption for resources
      in this stack.
    AllowedPattern:
      "^(NONE|arn:(aws[a-zA-Z-]*)?:kms:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d\
       {1}:\\d{12}:key/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9\
       a-fA-F]{4}\\-[0-9a-fA-F]{12})$"
    Default: "NONE"
    Type: String

Conditions:

  ShouldEnableEncryption:
    Fn::Not:
      - Fn::Equals:
          - "NONE"
          - !Ref KmsKeyArn
Mappings:

  Event:
    DetailType:
      CatalogTableStateChange: Catalog Table State Change

Resources:

  CatalogWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: data_platform-catalog
      Description: >-
        An AWS Athena WorkGroup used by the data platform catalog Lambda
        functions to run maintenance queries on the lake external tables.
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: True
        PublishCloudWatchMetricsEnabled: True
        RequesterPaysEnabled: False
        ResultConfiguration:
          EncryptionConfiguration:
            Fn::If:
              - ShouldEnableEncryption
              - EncryptionOption: SSE_KMS
                KmsKey: !Ref KmsKeyArn
              - !Ref AWS::NoValue
          OutputLocation:
            Fn::Join:
              - ""
              - - "s3://"
                - Fn::ImportValue: LogsBucketName
                - "/AWSLogs/"
                - !Ref AWS::AccountId
                - "/Athena/"
                - !Ref AWS::Region
                - "/"

  CatalogDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description:
          Fn::Sub: >-
            A database containing valided data stored as JSON objects,
            structured with a dataframe-like structure.
        LocationUri:
          Fn::Join:
              - ""
              - - "s3://"
                - Fn::ImportValue: DataframeBucketName
        Name: catalog

###############################################################################
# \/                  AthenaExecutor lambda configuration                    \/ #
###############################################################################

  AthenaExecutorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: catalog-athena_executor
      Description: >-
        TODO
      Role:
        Fn::GetAtt:
          - AthenaExecutorFunctionRole
          - Arn
      CodeUri: ./athena_executor/
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Layers:
        - Fn::Transform:
            Name: LatestLayerVersion
            Parameters:
              LayerName: python-sqs_utils
        - Fn::Transform:
            Name: LatestLayerVersion
            Parameters:
              LayerName: python-events_utils
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
          ATHENA_WORKGROUP: !Ref CatalogWorkGroup
          GLUE_DATABASE_NAME: !Ref CatalogDatabase

  #
  AthenaExecutorFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${AthenaExecutorFunction}"
      RetentionInDays: 30
      KmsKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  # Allow the AthenaExecutorFunction lambda function to write to Cloudwatch,
  # read/write to S3, receive and write messages to SQS.
  AthenaExecutorFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AthenaExecutorFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - Fn::If:
            - ShouldEnableEncryption
            - PolicyName: KmsAccess
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - kms:Encrypt*
                      - kms:Decrypt*
                      - kms:ReEncrypt*
                      - kms:GenerateDataKey*
                      - kms:Describe*
                    Resource:
                      - !Ref KmsKeyArn
            - !Ref AWS::NoValue
        # Create and put events to Cloudwatch events (Eventbridge).
        - PolicyName: EventsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - "*"
        - PolicyName: AthenaExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - glue:*
                  - glue:GetDatabase
                  # arn:aws:glue:eu-west-1:177754923675:catalog
                  - glue:GetTable
                  - glue:GetPartition*
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":glue:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":catalog"
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":glue:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":table/"
                        - !Ref CatalogDatabase
                        - "/*"
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":glue:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":database/"
                        - !Ref CatalogDatabase

              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                Resource:
                  - Fn::ImportValue: LogsBucketArn
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - Fn::ImportValue: LogsBucketArn
                        - "/AWSLogs/"
                        - !Ref AWS::AccountId
                        - "/Athena/"
                        - !Ref AWS::Region
                        - "/*"
              - Effect: Allow
                Action:
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:StartQueryExecution
                  - athena:StopQueryExecution
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":athena:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":workgroup/"
                        - !Ref CatalogWorkGroup
        # Create and put logs to Cloudwatch log groups.
        - PolicyName: LogsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":logs:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":*"
        - PolicyName: SqsConsumer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueue*
                Resource:
                  - !GetAtt AthenaExecutorQueue.Arn

  #
  AthenaExecutorFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt AthenaExecutorQueue.Arn
      FunctionName: !GetAtt AthenaExecutorFunction.Arn

  #
  AthenaExecutorQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-athena_executor.fifo
      VisibilityTimeout: 1800
      ContentBasedDeduplication: True
      FifoQueue: True
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AthenaExecutorDlqQueue.Arn
        maxReceiveCount: 1
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue
  #
  AthenaExecutorQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AthenaExecutorQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: AthenaExecutorQueuePolicy
        Statement:
          - Sid: AthenaExecutorQueueEventRule
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AthenaExecutorQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt AthenaExecutorQueueEventRule.Arn

  #
  AthenaExecutorQueueEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description:
        TODO
      EventPattern:
        detail-type:
          - Fn::FindInMap:
              - Event
              - DetailType
              - CatalogTableStateChange
        detail:
          state:
            - SUCCEEDED
      State: ENABLED
      Targets:
        - Arn: !GetAtt AthenaExecutorQueue.Arn
          Id: CreateTableRule
          SqsParameters:
            MessageGroupId: CreateTable
          InputTransformer:
            InputPathsMap:
              tableName: $.detail.result.table.name
              tableLocation: $.detail.result.table.location
              partitionKeys: $.detail.result.partition.keys
            InputTemplate:
              Fn::Sub:
                - '
                    {
                      "type": "CreateTable",
                      "queryTemplate": "${QueryTemplate}",
                      "templateValues": {
                         "database": "${Database}",
                         "tableName": <tableName>,
                         "partitionKeys": <partitionKeys>,
                         "tableLocation": <tableLocation>,
                         "isEncrypted": "${IsEncrypted}"
                      }
                    }
                  '
                - Database: !Ref CatalogDatabase
                  IsEncrypted:
                    Fn::If:
                      - ShouldEnableEncryption
                      - "true"
                      - "false"
                  QueryTemplate: >-
                    CREATE EXTERNAL TABLE IF NOT EXISTS {{ database }}.{{ tableName
                    }} PARTITIONED BY ({% for partition in partitionKeys %}{{ partition }} string{%
                    if not loop.last %}, {% endif %}{% endfor %}) ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
                    WITH SERDEPROPERTIES ('ignore.malformed.json'='true') LOCATION '{{ tableLocation
                    }}' TBLPROPERTIES ('has_encrypted_data'='{{ isEncrypted }}');
#
        - Arn: !GetAtt AthenaExecutorQueue.Arn
          Id: SelectMissingColumnsRule
          SqsParameters:
            MessageGroupId: SelectMissingColumns
          InputTransformer:
            InputPathsMap:
              tableName: $.detail.result.table.name
              columns: $.detail.result.columns
            InputTemplate:
              Fn::Sub:
                - '
                  {
                    "type": "SelectMissingColumns",
                    "queryTemplate": "${QueryTemplate}",
                    "templateValues": {
                      "database": "${Database}",
                      "tableName": <tableName>,
                      "columns": <columns>
                    }
                  }
                  '
                - Database: !Ref CatalogDatabase
                  QueryTemplate: >-
                    SELECT t.column_name
                    AS columns FROM ( VALUES {% for column in columns %}('{{ column }}'){% if
                    not loop.last %}, {% endif %}{% endfor %} ) AS t (column_name) WHERE t.column_name
                    NOT IN ( SELECT column_name FROM information_schema.columns WHERE table_schema
                    = '{{ database }}' AND table_name = '{{ tableName }}' AND extra_info IS
                    NULL);

        - Arn: !GetAtt AthenaExecutorQueue.Arn
          Id: AddPartitionsRule
          SqsParameters:
            MessageGroupId: AddPartitions
          InputTransformer:
            InputPathsMap:
              tableName: $.detail.result.table.name
              tableLocation: $.detail.result.table.location
              partitionKeys: $.detail.result.partition.keys
              partitionValues: $.detail.result.partition.values
            InputTemplate:
              Fn::Sub:
                - '
                  {
                    "type": "AddPartitions",
                    "queryTemplate": "${QueryTemplate}",
                    "templateValues": {
                      "database": "${Database}",
                      "tableName": <tableName>,
                      "tableLocation": <tableLocation>,
                      "partitionKeys": <partitionKeys>,
                      "partitionValues": <partitionValues>
                    }
                  }
                  '
                - Database: !Ref CatalogDatabase
                  QueryTemplate: >-
                    ALTER TABLE {{ database
                    }}.{{ tableName }} ADD IF NOT EXISTS PARTITION ( {% for key in partitionKeys %}{{ key }}={{
                    partitionValues[loop.index-1] }}{% if not loop.last %},{% endif %}{% endfor %} ) LOCATION '{{ tableLocation
                    }}/{% for key in partitionKeys %}{{ key }}={{ partitionValues[loop.index-1]
                    }}{% if not loop.last %}/{% endif %}{% endfor %}';

  AthenaExecutorDlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-athena_executor-dlq.fifo
      VisibilityTimeout: 900
      ContentBasedDeduplication: True
      FifoQueue: True
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  #
  AthenaExecutorDlqQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: AthenaExecutorDlqQueueThreshold
      AlarmDescription:
        Fn::Sub: ${AthenaExecutorDlqQueue.QueueName} contains messages.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AthenaExecutorDlqQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 0
      TreatMissingData: notBreaching
