AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31

Description: >-
  Deploy an Athena WorkGroup and Lambda functions that will keep your
  Athena tables, and data catalog up-to-date.

Parameters:

  KmsKeyArn:
    Description: >-
      The ARN of the KMS key that will be used to encrypt data services, such
      as CloudWatch LogGroups, S3 Buckets, SQS Queues...
      Setting this parameter to "NONE" will disable encryption for resources
      in this stack.
    AllowedPattern:
      "^(NONE|arn:(aws[a-zA-Z-]*)?:kms:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\\d\
       {1}:\\d{12}:key/[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9\
       a-fA-F]{4}\\-[0-9a-fA-F]{12})$"
    Default: "NONE"
    Type: String

Conditions:

  ShouldEnableEncryption:
    Fn::Not:
      - Fn::Equals:
          - "NONE"
          - !Ref KmsKeyArn
Mappings:

  Event:
    DetailType:
      CatalogTableStateChange: Catalog Table State Change

Resources:

  CatalogWorkGroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Name: data_platform-catalog
      Description: >-
        An AWS Athena WorkGroup used by the data platform catalog Lambda
        functions to run maintenance queries on the lake external tables.
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: True
        PublishCloudWatchMetricsEnabled: True
        RequesterPaysEnabled: False
        ResultConfiguration:
          EncryptionConfiguration:
            Fn::If:
              - ShouldEnableEncryption
              - EncryptionOption: SSE_KMS
                KmsKey: !Ref KmsKeyArn
              - !Ref AWS::NoValue
          OutputLocation:
            Fn::Join:
              - ""
              - - "s3://"
                - Fn::ImportValue: LogsBucketName
                - "/AWSLogs/"
                - !Ref AWS::AccountId
                - "/Athena/"
                - !Ref AWS::Region
                - "/"

  CatalogDatabase:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description:
          Fn::Sub: >-
            A database containing valided data stored as JSON objects,
            structured with a dataframe-like structure.
        LocationUri:
          Fn::Join:
              - ""
              - - "s3://"
                - Fn::ImportValue: DataframeBucketName
        Name: catalog


###############################################################################
# \/                    AddColumns lambda configuration                    \/ #
###############################################################################

  AddColumnsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: catalog-add_columns
      Description: >-
        TODO
      Role:
        Fn::GetAtt:
          - AddColumnsFunctionRole
          - Arn
      CodeUri: ./add_columns/
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Layers:
        - Fn::Transform:
            Name: LatestLayerVersion
            Parameters:
              LayerName: python-sqs_utils
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
          ATHENA_WORKGROUP: !Ref CatalogWorkGroup
          GLUE_DATABASE_NAME: !Ref CatalogDatabase

  #
  AddColumnsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${AddColumnsFunction}"
      RetentionInDays: 30
      KmsKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  # Allow the AddColumnsFunction lambda function to write to Cloudwatch,
  # read/write to S3, receive and write messages to SQS.
  AddColumnsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AddColumnsFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - Fn::If:
            - ShouldEnableEncryption
            - PolicyName: KmsAccess
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - kms:Encrypt*
                      - kms:Decrypt*
                      - kms:ReEncrypt*
                      - kms:GenerateDataKey*
                      - kms:Describe*
                    Resource:
                      - !Ref KmsKeyArn
            - !Ref AWS::NoValue
        - PolicyName: AthenaExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                Resource:
                  - Fn::ImportValue: LogsBucketArn
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - Fn::ImportValue: LogsBucketArn
                        - "/AWSLogs/"
                        - !Ref AWS::AccountId
                        - "/Athena/"
                        - !Ref AWS::Region
                        - "/*"
              - Effect: Allow
                Action:
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:StartQueryExecution
                  - athena:StopQueryExecution
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":athena:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":workgroup/"
                        - !Ref CatalogWorkGroup
        # Create and put logs to Cloudwatch log groups.
        - PolicyName: LogsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":logs:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":*"
        - PolicyName: SqsConsumer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueue*
                Resource:
                  - !GetAtt AddColumnsQueue.Arn

  #
  AddColumnsFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt AddColumnsQueue.Arn
      FunctionName: !GetAtt AddColumnsFunction.Arn

  #
  AddColumnsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-add_columns
      VisibilityTimeout: 1800
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AddColumnsDlqQueue.Arn
        maxReceiveCount: 1
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue
  #
  AddColumnsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AddColumnsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: AddColumnsQueuePolicy
        Statement:
          - Sid: AddColumnsQueueEventRule
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AddColumnsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt AddColumnsQueueEventRule.Arn

  #
  AddColumnsQueueEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description:
        TODO
      EventPattern:
        detail-type:
          - Fn::FindInMap:
              - Event
              - DetailType
              - CatalogTableStateChange
        detail:
          state:
            - SUCCEEDED
      State: ENABLED
      Targets:
        # Forward to AddColumnsFunction lambda function.
        - Arn: !GetAtt AddColumnsQueue.Arn
          Id: AddColumnsQueueRule
          InputTransformer:
            InputPathsMap:
              tableName: $.detail.result.table.name
              columns: $.detail.result.columns
            InputTemplate:
              '
              {
                "tableName": <tableName>,
                "columns": <columns>
              }
              '

  #
  AddColumnsDlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-add_columns-dlq
      VisibilityTimeout: 900
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  #
  AddColumnsDlqQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: AddColumnsDlqQueueThreshold
      AlarmDescription:
        Fn::Sub: ${AddColumnsDlqQueue.QueueName} contains messages.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AddColumnsDlqQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 0
      TreatMissingData: notBreaching

###############################################################################
# \/                  AddPartitions lambda configuration                   \/ #
###############################################################################

  AddPartitionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: catalog-add_partitions
      Description: >-
        TODO
      Role:
        Fn::GetAtt:
          - AddPartitionsFunctionRole
          - Arn
      CodeUri: ./add_partitions/
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Layers:
        - Fn::Transform:
            Name: LatestLayerVersion
            Parameters:
              LayerName: python-sqs_utils
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
          ATHENA_WORKGROUP: !Ref CatalogWorkGroup
          GLUE_DATABASE_NAME: !Ref CatalogDatabase

  #
  AddPartitionsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${AddPartitionsFunction}"
      RetentionInDays: 30
      KmsKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  # Allow the AddPartitionsFunction lambda function to write to Cloudwatch,
  # read/write to S3, receive and write messages to SQS.
  AddPartitionsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AddPartitionsFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - Fn::If:
            - ShouldEnableEncryption
            - PolicyName: KmsAccess
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - kms:Encrypt*
                      - kms:Decrypt*
                      - kms:ReEncrypt*
                      - kms:GenerateDataKey*
                      - kms:Describe*
                    Resource:
                      - !Ref KmsKeyArn
            - !Ref AWS::NoValue
        - PolicyName: AthenaExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                Resource:
                  - Fn::ImportValue: LogsBucketArn
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - Fn::ImportValue: LogsBucketArn
                        - "/AWSLogs/"
                        - !Ref AWS::AccountId
                        - "/Athena/"
                        - !Ref AWS::Region
                        - "/*"
              - Effect: Allow
                Action:
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:StartQueryExecution
                  - athena:StopQueryExecution
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":athena:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":workgroup/"
                        - !Ref CatalogWorkGroup
        # Create and put logs to Cloudwatch log groups.
        - PolicyName: LogsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":logs:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":*"
        - PolicyName: SqsConsumer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueue*
                Resource:
                  - !GetAtt AddPartitionsQueue.Arn

  #
  AddPartitionsFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt AddPartitionsQueue.Arn
      FunctionName: !GetAtt AddPartitionsFunction.Arn

  #
  AddPartitionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-add_partitions
      VisibilityTimeout: 1800
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt AddPartitionsDlqQueue.Arn
        maxReceiveCount: 1
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue
  #
  AddPartitionsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref AddPartitionsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: AddPartitionsQueuePolicy
        Statement:
          - Sid: AddPartitionsQueueEventRule
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt AddPartitionsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt AddPartitionsQueueEventRule.Arn

  #
  AddPartitionsQueueEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description:
        TODO
      EventPattern:
        detail-type:
          - Fn::FindInMap:
              - Event
              - DetailType
              - CatalogTableStateChange
        detail:
          state:
            - SUCCEEDED
      State: ENABLED
      Targets:
        # Forward to AddPartitionsFunction lambda function.
        - Arn: !GetAtt AddPartitionsQueue.Arn
          Id: AddPartitionsQueueRule
          InputTransformer:
            InputPathsMap:
              tableName: $.detail.result.table.name
              partitionKeys: $.detail.result.partition.keys
              partitionValues: $.detail.result.partition.values
            InputTemplate:
              '
              {
                "tableName": <tableName>,
                "partitionKeys": <partitionKeys>,
                "partitionValues": <partitionKeys>
              }
              '

  #
  AddPartitionsDlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-add_partitions-dlq
      VisibilityTimeout: 900
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  #
  AddPartitionsDlqQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: AddPartitionsDlqQueueThreshold
      AlarmDescription:
        Fn::Sub: ${AddPartitionsDlqQueue.QueueName} contains messages.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt AddPartitionsDlqQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 0
      TreatMissingData: notBreaching


###############################################################################
# \/                   CreateTable lambda configuration                    \/ #
###############################################################################

  CreateTableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: catalog-create_table
      Description: >-
        TODO
      Role:
        Fn::GetAtt:
          - CreateTableFunctionRole
          - Arn
      CodeUri: ./create_table/
      Handler: lambda_function.lambda_handler
      Runtime: python3.8
      Layers:
        - Fn::Transform:
            Name: LatestLayerVersion
            Parameters:
              LayerName: python-sqs_utils
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          LOG_LEVEL: DEBUG
          ATHENA_WORKGROUP: !Ref CatalogWorkGroup
          GLUE_DATABASE_NAME: !Ref CatalogDatabase

  #
  CreateTableFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/aws/lambda/${CreateTableFunction}"
      RetentionInDays: 30
      KmsKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  # Allow the CreateTableFunction lambda function to write to Cloudwatch,
  # read/write to S3, receive and write messages to SQS.
  CreateTableFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CreateTableFunction
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - Fn::If:
            - ShouldEnableEncryption
            - PolicyName: KmsAccess
              PolicyDocument:
                Statement:
                  - Effect: Allow
                    Action:
                      - kms:Encrypt*
                      - kms:Decrypt*
                      - kms:ReEncrypt*
                      - kms:GenerateDataKey*
                      - kms:Describe*
                    Resource:
                      - !Ref KmsKeyArn
            - !Ref AWS::NoValue
        - PolicyName: AthenaExecution
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:ListBucketMultipartUploads
                Resource:
                  - Fn::ImportValue: LogsBucketArn
              - Effect: Allow
                Action:
                  - s3:AbortMultipartUpload
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - Fn::Join:
                      - ""
                      - - Fn::ImportValue: LogsBucketArn
                        - "/AWSLogs/"
                        - !Ref AWS::AccountId
                        - "/Athena/"
                        - !Ref AWS::Region
                        - "/*"
              - Effect: Allow
                Action:
                  - athena:GetQueryExecution
                  - athena:GetQueryResults
                  - athena:StartQueryExecution
                  - athena:StopQueryExecution
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":athena:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":workgroup/"
                        - !Ref CatalogWorkGroup
        # Create and put logs to Cloudwatch log groups.
        - PolicyName: LogsWrite
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:"
                        - !Ref AWS::Partition
                        - ":logs:"
                        - !Ref AWS::Region
                        - ":"
                        - !Ref AWS::AccountId
                        - ":*"
        - PolicyName: SqsConsumer
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueue*
                Resource:
                  - !GetAtt CreateTableQueue.Arn

  #
  CreateTableFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt CreateTableQueue.Arn
      FunctionName: !GetAtt CreateTableFunction.Arn

  #
  CreateTableQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-create_table
      VisibilityTimeout: 1800
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt CreateTableDlqQueue.Arn
        maxReceiveCount: 1
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue
  #
  CreateTableQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref CreateTableQueue
      PolicyDocument:
        Version: "2012-10-17"
        Id: CreateTableQueuePolicy
        Statement:
          - Sid: CreateTableQueueEventRule
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt CreateTableQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt CreateTableQueueEventRule.Arn

  #
  CreateTableQueueEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description:
        TODO
      EventPattern:
        detail-type:
          - Fn::FindInMap:
              - Event
              - DetailType
              - CatalogTableStateChange
        detail:
          state:
            - SUCCEEDED
      State: ENABLED
      Targets:
        # Forward to CreateTableFunction lambda function.
        - Arn: !GetAtt CreateTableQueue.Arn
          Id: CreateTableQueueRule
          InputTransformer:
            InputPathsMap:
              tableName: $.detail.result.table.name
              tableLocation: $.detail.result.table.location
              partitionKeys: $.detail.result.partition.keys
            InputTemplate:
              '
              {
                "tableName": <tableName>,
                "tableLocation": <tableLocation>,
                "partitionKeys": <partitionKeys>
              }
              '

  #
  CreateTableDlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: catalog-create_table-dlq
      VisibilityTimeout: 900
      KmsMasterKeyId:
        Fn::If:
          - ShouldEnableEncryption
          - Fn::Select:
              - 1
              - Fn::Split:
                  - "/"
                  - Fn::Select:
                      - 5
                      - Fn::Split:
                          - ":"
                          - !Ref KmsKeyArn
          - !Ref AWS::NoValue

  #
  CreateTableDlqQueueAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CreateTableDlqQueueThreshold
      AlarmDescription:
        Fn::Sub: ${CreateTableDlqQueue.QueueName} contains messages.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt CreateTableDlqQueue.QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Period: 300
      Statistic: Maximum
      Threshold: 0
      TreatMissingData: notBreaching
